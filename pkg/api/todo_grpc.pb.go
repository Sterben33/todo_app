// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.6.1
// source: api/proto/todo.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ToDoClient is the client API for ToDo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToDoClient interface {
	Create(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Task, error)
	Read(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error)
	Update(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	Delete(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Empty, error)
	MarkAsDone(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error)
	GetList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskList, error)
}

type toDoClient struct {
	cc grpc.ClientConnInterface
}

func NewToDoClient(cc grpc.ClientConnInterface) ToDoClient {
	return &toDoClient{cc}
}

func (c *toDoClient) Create(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/api.ToDo/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoClient) Read(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/api.ToDo/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoClient) Update(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/api.ToDo/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoClient) Delete(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.ToDo/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoClient) MarkAsDone(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/api.ToDo/MarkAsDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoClient) GetList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskList, error) {
	out := new(TaskList)
	err := c.cc.Invoke(ctx, "/api.ToDo/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToDoServer is the server API for ToDo service.
// All implementations should embed UnimplementedToDoServer
// for forward compatibility
type ToDoServer interface {
	Create(context.Context, *Data) (*Task, error)
	Read(context.Context, *TaskId) (*Task, error)
	Update(context.Context, *Task) (*Task, error)
	Delete(context.Context, *TaskId) (*Empty, error)
	MarkAsDone(context.Context, *TaskId) (*Task, error)
	GetList(context.Context, *Empty) (*TaskList, error)
}

// UnimplementedToDoServer should be embedded to have forward compatible implementations.
type UnimplementedToDoServer struct {
}

func (UnimplementedToDoServer) Create(context.Context, *Data) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedToDoServer) Read(context.Context, *TaskId) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedToDoServer) Update(context.Context, *Task) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedToDoServer) Delete(context.Context, *TaskId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedToDoServer) MarkAsDone(context.Context, *TaskId) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsDone not implemented")
}
func (UnimplementedToDoServer) GetList(context.Context, *Empty) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}

// UnsafeToDoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToDoServer will
// result in compilation errors.
type UnsafeToDoServer interface {
	mustEmbedUnimplementedToDoServer()
}

func RegisterToDoServer(s grpc.ServiceRegistrar, srv ToDoServer) {
	s.RegisterService(&ToDo_ServiceDesc, srv)
}

func _ToDo_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ToDo/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServer).Create(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDo_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ToDo/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServer).Read(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDo_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ToDo/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServer).Update(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDo_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ToDo/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServer).Delete(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDo_MarkAsDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServer).MarkAsDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ToDo/MarkAsDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServer).MarkAsDone(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDo_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ToDo/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServer).GetList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ToDo_ServiceDesc is the grpc.ServiceDesc for ToDo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToDo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ToDo",
	HandlerType: (*ToDoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ToDo_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ToDo_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ToDo_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ToDo_Delete_Handler,
		},
		{
			MethodName: "MarkAsDone",
			Handler:    _ToDo_MarkAsDone_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _ToDo_GetList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/todo.proto",
}
